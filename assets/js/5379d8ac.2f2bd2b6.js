"use strict";(self.webpackChunk_docs_gh_pages=self.webpackChunk_docs_gh_pages||[]).push([[566],{1598:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return r},contentTitle:function(){return c},metadata:function(){return m},toc:function(){return l},default:function(){return p}});var n=a(4820),s=a(5819),o=(a(3929),a(5242)),i=["components"],r={sidebar_position:3},c="State Management",m={unversionedId:"fundamentals/execution-context/state-management",id:"fundamentals/execution-context/state-management",isDocsHomePage:!1,title:"State Management",description:"Almost always tests require state management. State can be stored in memory (variable) or outside the process (e.g. file or database).",source:"@site/docs/fundamentals/execution-context/state-management.md",sourceDirName:"fundamentals/execution-context",slug:"/fundamentals/execution-context/state-management",permalink:"/behavioral/docs/fundamentals/execution-context/state-management",editUrl:"https://github.com/typedtools/behavioral/edit/docs/gh-pages/docs/fundamentals/execution-context/state-management.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Accessing step arguments",permalink:"/behavioral/docs/fundamentals/execution-context/accessing-step-arguments"}},l=[{value:"In-Memory state",id:"in-memory-state",children:[],level:3},{value:"Remote state",id:"remote-state",children:[],level:3}],d={toc:l};function p(e){var t=e.components,a=(0,s.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"state-management"},"State Management"),(0,o.kt)("p",null,"Almost always tests require state management. State can be stored in memory (variable) or outside the process (e.g. file or database)."),(0,o.kt)("h3",{id:"in-memory-state"},"In-Memory state"),(0,o.kt)("p",null,"In Behavioral state is defined via state classes. Here's example state class:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface Post {\n  title: string;\n  description: string;\n}\n\nexport class BlogState {\n  posts: Post[] = [];\n}\n")),(0,o.kt)("p",null,"To use state class in execution context declare property and decorate it with ",(0,o.kt)("inlineCode",{parentName:"p"},"State")," decorator."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { State, Given, Then, Param } from '@typedtools/behavioral';\n\n// ...\n\n@ExecutionContext()\nexport class BlogContext {\n  @State()\n  state!: BlogState;\n\n  @Given('I have posts:')\n  getPosts(@DataTable() posts: Post[]): void {\n    this.state.posts.push(...p)\n  }\n\n  @Then('I see \"<amount>\" posts')\n  seeNumOfPosts(@Param('amount') amount: number): void {\n    expect(this.state.posts.length).toBe(amount);\n  }\n}\n")),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"By default state is assigned before scenario starts with separate instance for every scenario."))),(0,o.kt)("h3",{id:"remote-state"},"Remote state"),(0,o.kt)("p",null,"Remote state requires to be restored to it's initial value after every scenario. To avoid defining steps for setup or teardown Behavioral provides set of life-cycle methods. Life-cycle methods are defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"FeatureLifecycle")," interface."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import type { FeatureLifecycle } from '@typedtools/behavioral';\n\nexport class BlogState implements FeatureLifecycle {\n  posts: Post[] = [];\n\n  afterScenario(): void {\n    this.posts = [];\n  }\n}\n")))}p.isMDXComponent=!0}}]);